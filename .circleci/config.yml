version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  slack: circleci/slack@4.4.2
  jq: circleci/jq@2.2.0


commands:
  destroy-stacks:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: "string"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force

            aws cloudformation delete-stack --stack-name frontend-stack-<<parameters.workflow_id>>
            #
            aws cloudformation delete-stack --stack-name backend-stack-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: 255c255e-cb8e-411d-90e3-27354d90e996" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            echo "Frontend build started"
            cd frontend
            echo "npm install started"
            npm install
            echo "Starting building frontend"
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - destroy-stacks:
          workflow_id: ${CIRCLE_WORKFLOW_ID}


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            echo "Backend build started"
            cd backend
            echo "npm install started"
            npm install
            echo "Starting building backend"
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - destroy-stacks:
          workflow_id: ${CIRCLE_WORKFLOW_ID}


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-test]
      # Your job code here
      - run:
          name: Frontend Test
          command: |
            echo "Frontend testing started"
            cd frontend
            npm install 
            echo "Testing Frontend"
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
      - destroy-stacks:
          workflow_id: ${CIRCLE_WORKFLOW_ID}


  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-test]
      # Your job code here
      - run:
          name: Backend Test
          command: |
            echo "Backend testing started"
            cd backend
            npm install 
            echo "Testing Backend"
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

      - destroy-stacks:
          workflow_id: ${CIRCLE_WORKFLOW_ID}


  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-scan]
      # Your job code here
      - run:
          name: Frontend Scan
          command: |
            echo "Install dependencies"
            cd frontend
            npm install 
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

      - destroy-stacks:
          workflow_id: ${CIRCLE_WORKFLOW_ID}


  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-scan]
      # Your job code here
      - run:
          name: Backend Scan
          command: |
            echo "Install dependencies"
            cd backend
            npm install 
            # npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

      - destroy-stacks:
          workflow_id: ${CIRCLE_WORKFLOW_ID}


  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: 
          name: tar and gzip installation
          command: |
            yum -y install tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="cicd-udacity" \
              --stack-name "backend-stack-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="cicd-udacity" \
              --stack-name "fronend-stack-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="$CIRCLE_WORKFLOW_ID"  
              #-

      - run:
          name: put ip to ansible inventory text file
          command: |
            aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
                  --output text >> .circleci/ansible/inventory.txt
            echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
            echo "backend IP in inventory is"
            cat .circleci/ansible/inventory.txt
            echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
                  #

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/backend/

      - destroy-stacks:
          workflow_id: ${CIRCLE_WORKFLOW_ID}


  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11

    steps:
      # Checkout code from git
      - checkout

      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["3f:d8:64:27:60:a6:f9:4e:17:0c:8d:7c:f4:bc:f6:3a"]

      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible

      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-stacks:
          workflow_id: ${CIRCLE_WORKFLOW_ID}


  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/install
      - attach_workspace:
          at: ~/

      - restore_cache:
          keys: [backend-build]

      - run:
          name: Run migrations
          command: |
            # Your code here
            ls backend
            cd backend
            # npm audit fix
            npm install
            npm run migrations > migrations_ouput.txt
            cat migrations_ouput.txt

      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd backend
            if grep -q "has been executed successfully" migrations_ouput.txt
              then
                echo "sending 1 to migration_${CIRCLE_WORKFLOW_ID}"
                curl -H "Content-Type: text/plain" -H "token: be4667cf-cd29-4c22-ad36-2be5b4e85c4f" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              else
                echo "sending 0 to migration_${CIRCLE_WORKFLOW_ID}"
                curl -H "Content-Type: text/plain" -H "token: be4667cf-cd29-4c22-ad36-2be5b4e85c4f" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi

      - revert-migrations

      - destroy-stacks:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
       - image: amazon/aws-cli
    steps:
      - checkout 

      - run:
          name:  dependencies
          command: |
            # your code here
            curl -sL https://rpm.nodesource.com/setup_12.x | bash -
            yum install -y nodejs
            yum install -y tar gzip
      - run:
          name: backend url
          command: |
            # your code here
            # npm audit fix
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text)

            echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
            echo "backend IP in inventory is"
            echo "$BACKEND_IP"
            echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"

            export API_URL="http://${BACKEND_IP}:3030"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "I am done"
            echo "${API_URL}"
            #

      - run:
          name: Deploy frontend objs
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 sync dist s3://udapeople-"${CIRCLE_WORKFLOW_ID}"

      - destroy-stacks:
          workflow_id: ${CIRCLE_WORKFLOW_ID}    
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      # attach workspace
      - add_ssh_keys:
          fingerprints:  ["3f:d8:64:27:60:a6:f9:4e:17:0c:8d:7c:f4:bc:f6:3a"]

      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            apk add --update ansible gzip  nodejs npm curl tar 
            pip install awscli

      - run:
          name: Deploy backend
          command: |
            touch backend/.env
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"           
            tar -C backend -czvf backend.tar.gz .
            cd .circleci/ansible
            echo "#########"
            cat inventory.txt
            echo "#########"
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-stacks:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli

      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030" #"http://54.67.64.90:3030"
            echo "${API_URL}"
            URL="${API_URL}/api/status"
            echo "$(curl -I ${URL})"
            echo "${URL}"
            if curl -s ${URL} | grep "ok"
              then
                exit 0
              else
                exit 1
            fi

      - revert-migrations

      - destroy-stacks:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --stack-name udapeople-cloudfront-stack --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" --tags project=udapeople

            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo "$OldWorkflowID"
            curl -H "Content-Type: text/plain" -H "token: be4667cf-cd29-4c22-ad36-2be5b4e85c4f" --request PUT --data "$OldWorkflowID" https://api.memstash.io/values/WorkflowID

      # - revert-migrations 

      - destroy-stacks:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

      - slack/notify:
          event: fail
          template: basic_fail_1


  cleanup:
    docker:
      - image: amazon/aws-cli

    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(curl -H "token: be4667cf-cd29-4c22-ad36-2be5b4e85c4f" --request GET https://api.memstash.io/values/WorkflowID)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo "STACKS are: ${STACKS}"
            echo "OldWorkflowID is: ${OldWorkflowID}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm  s3://udapeople-"${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name backend-stack-"${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name frontend-stack-"${OldWorkflowID}"
                aws s3 rb  s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --force
            fi
            

# workflows:
#   default:
    # jobs:
      # - build-frontend

      # - build-backend

      # - test-frontend:
      #     requires: [build-frontend]

      # - test-backend:
      #     requires: [build-backend]

      # - scan-backend
      #     requires: [build-backend]

      # - scan-frontend:
          # requires: [build-frontend]

#       - deploy-infrastructure:
#           # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           filters:
#             branches:
#               only: [main]

#       - configure-infrastructure:
#           requires: [deploy-infrastructure]

#       - run-migrations:
#           requires: [configure-infrastructure]

#       - deploy-frontend:
#           requires: [run-migrations]

#       - deploy-backend:
#           requires: [run-migrations]

#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]

#       - cloudfront-update:
#           context: slack-siren
#           requires: [smoke-test]

#       - cleanup:
#           requires: [cloudfront-update]



